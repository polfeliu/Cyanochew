{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/google/cyanobyte/spec/cyanobyte.schema.json",
  "title": "Cyanobyte Specification Validator",
  "description": "This file is used to validate whether a given document meets the CyanoByte specification.",
  "type": "object",
  "properties": {
    "cyanobyte": {
      "description": "The version of the CyanoByte specification this file follows.",
      "type": "string"
    },
    "info": {
      "description": "Info block of the file",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the document. This should be used as the class name in the auto-generated code and therefore should be short (e.g. the part name).",
          "type": "string"
        },
        "package": {
          "description": "Logical hierarchy of this device, typically organized as a reverse domain name.",
          "type": "string"
        },
        "description": {
          "description": "A description of the document.",
          "type": "string"
        },
        "contact": {
          "description": "Contact info for the maintainer.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the maintainer.",
              "type": "string"
            },
            "url": {
              "description": "URL of the maintainer organization.",
              "type": "string",
              "format": "uri"
            },
            "email": {
              "description": "Email address for the maintainer.",
              "type": "string",
              "format": "email"
            }
          },
          "required": [
            "name",
            "url",
            "email"
          ]
        },
        "copyright": {
          "description": "Copyright info for the source code.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the copyright holder.",
              "type": "string"
            },
            "date": {
              "description": "Year / years for the copyright.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "date"
          ]
        },
        "license": {
          "description": "License this document uses. TODO: Add validation other than it being a string.",
          "type": "object",
          "properties": {
            "name": {
              "description": "A SPDX compliant license identifier",
              "anyOf": [
                {"type": "string"},
                {"enum": [
                  "Apache-2.0",
                  "MIT"
                ]}
              ]
            },
            "url": {
              "description": "If the license name is not SPDX compliant, this can link to the license",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "version": {
          "description": "Version number for this document using kind of semver.",
          "type": "string"
        }
      },
      "required": [
        "title",
        "description",
        "contact",
        "license",
        "version"
      ]
    },
    "i2c": {
      "description": "I2C settings",
      "type": "object",
      "properties": {
        "addressType": {
          "description": "Addressing type of the component.",
          "type": "string",
          "enum": [
            "7-bit",
            "10-bit"
          ]
        },
        "address": {
          "description": "I2C Address of the component",
          "oneOf": [
            {"type": "integer"},
            {
              "type": "array",
              "items": {
                "description": "Array of potentially valid device addresses",
                "type": "integer"
              }
            }
          ]
        },
        "addressMask": {
          "description": "Address mask for addresses that can be altered",
          "type": "integer"
        },
        "endian": {
          "description": "Endianness of the component",
          "type": "string",
          "enum": [
            "little",
            "big"
          ]
        }
      },
      "required": [
        "addressType",
        "address",
        "addressMask"
      ]
    },
    "spi": {
      "description": "SPI settings",
      "type": "object",
      "properties": {
        "clockPolarity": {
          "description": "The value of the clock signal in an IDLE state",
          "type": "string",
          "enum": ["low", "high"],
          "default": "low"
        },
        "clockPhase": {
          "description": "On which clock edge is data transferred",
          "type": "string",
          "enum": ["leading", "trailing"],
          "default": "leading"
        },
        "frequency": {
          "description": "Maximum supported shared clock frequency in Hertz",
          "type": "number"
        },
        "endian": {
          "description": "Endianness of the component",
          "type": "string",
          "enum": [
            "little",
            "big"
          ],
          "default": "big"
        },
        "word": {
          "description": "The size of a word in bits",
          "type": "number",
          "default": 8
        },
        "address": {
          "description": "Device address. Required when spi.format is 'register'",
          "type": "number"
        },
        "format": {
          "description": "The data format for SPI payloads",
          "type": "string",
          "enum": [
            "register",
            "emboss"
          ]
        }
      },
      "required": [
        "frequency", "format"
      ]
    },
    "registers": {
      "description": "Chip registers",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^.*$": {
          "description": "Chip register",
          "type": "object",
          "properties": {
            "title": {
              "description": "Title of the register",
              "type": "string"
            },
            "description": {
              "description": "Description of the register",
              "type": "string"
            },
            "address": {
              "description": "Address of the register",
              "type": "integer"
            },
            "length": {
              "description": "Length of the register in bits",
              "type": "integer"
            },
            "signed": {
              "description": "Whether the integer response should be signed when read",
              "type": "boolean"
            },
            "readWrite": {
              "description": "Can you read and/or write to this register",
              "type": "string",
              "enum": [
                "R",
                "R/W",
                "W",
                "n"
              ]
            }
          },
          "required": [
            "title",
            "description",
            "address",
            "length"
          ]
        }
      }
    },
    "fields": {
      "description": "Subcomponents of a register",
      "type": "object",
      "items": {
        "description": "Outer object",
        "type": "object",
        "patternProperties": {
          "^.*$": {
            "description": "Chip function",
            "type": "object",
            "properties": {
              "title": {
                "description": "Title of the function",
                "type": "string"
              },
              "description": {
                "description": "Description of the function",
                "type": "string"
              },
              "register": {
                "description": "Register of the function",
                "type": "string"
              },
              "readWrite": {
                "description": "Can you read and/or write to this register",
                "type": "string",
                "enum": [
                  "R",
                  "R/W",
                  "W",
                  "n"
                ]
              },
              "bitStart": {
                "description": "What is the starting bit?",
                "type": "integer"
              },
              "bitEnd": {
                "description": "What is the ending bit?",
                "type": "integer"
              },
              "type": {
                "description": "What type of value is this?",
                "type": "string",
                "enum": [
                  "enum",
                  "number"
                ]
              },
              "enum": {
                "description": "List of values",
                "type": "object",
                "items": {
                  "description": "Enum value",
                  "type": "object",
                  "properties": {
                    "title": {
                      "description": "Enum title",
                      "type": "string"
                    },
                    "value": {
                      "description": "Enum value",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "required": [
              "title",
              "description",
              "readWrite"
            ]
          }
        }
      }
    },
    "functions": {
      "description": "Chip functions",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^.+$": {
          "description": "Chip function",
          "type": "object",
          "properties": {
            "title": {
              "description": "Title of the function",
              "type": "string"
            },
            "description": {
              "description": "Description of the function",
              "type": "string"
            },
            "register": {
              "description": "Register of the function",
              "type": "string"
            },
            "computed": {
              "description": "Properties for a computed element",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^.+$": {
                  "description": "Title of the computation",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "input": {
                      "description": "Variables that are required before running computation.",
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^.+$": {
                          "description": "Variable name",
                          "$ref": "#/definitions/NumberPrimitive"
                        }
                      }
                    },
                    "variables": {
                      "description": "All variables used in the computation",
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^.+$": {
                          "description": "Variable name",
                          "$ref": "#/definitions/NumberPrimitive"
                        }
                      }
                    },
                    "output": {
                      "description": "Specifies the type of value being returned by the function",
                      "$ref": "#/definitions/NumberPrimitive"
                    },
                    "logic": {
                      "description": "Set of logical operations",
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Command"
                      }
                    },
                    "return": {
                      "description": "The variable or variable array to return",
                      "type": ["string", "array"]
                    }
                  }
                }
              }
            }
          },
          "required": [
            "title",
            "description"
          ]
        }
      }
    },
    "extensions": {
      "description": "Reserved for custom parameters",
      "type": "object"
    }
  },
  "required": [
    "cyanobyte",
    "info"
  ],
  "definitions": {
    "NumberPrimitive": {
      "description": "Valid types of numbers that can be represented in Pseudo-YAML.",
      "type": "string",
      "enum": [
        "int8",
        "int16",
        "int32",
        "uint8",
        "uint16",
        "uint32",
        "float32",
        "float64"
      ]
    },
    "Command": {
      "type": "object",
      "description": "A command to be used in Pseduo-YAML operations.",
      "additionalProperties": false,
      "patternProperties": {
        "^[^$].*$": {
          "description": "Often a variable name. (^.+$) = (result of operations)",
          "$ref": "#/definitions/SingleOperation"
        },
        "^\\$cmdWrite$": {
          "description": "Writes a value to a register",
          "type": "object",
          "properties": {
            "register": {
              "description": "#/registers/(register name)",
              "type": "string"
            },
            "value": {
              "description": "The value or variable to send",
              "type": ["string", "number"]
            }
          },
          "required": [
            "register"
          ]
        },
        "^\\$delay$": {
          "description": "Defines logic to run after a specified delay.",
          "type": "object",
          "properties": {
            "for": {
              "description": "Number of milliseconds to delay.",
              "type": ["number", "string"]
            },
            "name": {
              "description": "Name of the delay, or why there is a delay. This is used for some language templates to name the callback if the platform is non-blocking.",
              "type": "string"
            },
            "after": {
              "description": "Logic to run after the delay.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Command"
              }
            }
          },
          "required": [
            "for", "name", "after"
          ]
        }
      }
    },
    "SingleOperation": {
      "description": "A representation of one logical operation, which may included nested operations.",
      "type": ["string", "number", "array", "object"],
      "additionalProperties": false,
      "items": {
        "$ref": "#/definitions/SingleOperation"
      },
      "properties": {
        "sum": {
          "description": "Summation of multiple numbers.",
          "type": "array",
          "items": {
            "description": "Numbers to be added together.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "difference": {
          "description": "Subtraction of multiple numbers.",
          "type": "array",
          "items": {
            "description": "Numbers to be subtracted from one another from first to last.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "product": {
          "description": "Product of multiple numbers.",
          "type": "array",
          "items": {
            "description": "Numbers to be multiplied together.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "division": {
          "description": "Division of multiple numbers.",
          "type": "array",
          "items": {
            "description": "Numbers to be divided from one another from first to last.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "power": {
          "description": "Performs a power operation.",
          "type": "array",
          "items": {
            "description": "First element is the base and the second element is the power.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "modulus": {
          "description": "Performs a modulus operation.",
          "type": "array",
          "items": {
            "description": "First element is the base and the second element is the modulator.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "bitwiseOr": {
          "description": "Bitwise OR operation.",
          "type": "array",
          "items": {
            "description": "Numbers to be ORed together.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "bitwiseAnd": {
          "description": "Bitwise AND operation.",
          "type": "array",
          "items": {
            "description": "Numbers to be ANDed together.",
            "$ref": "#/definitions/SingleOperation"
          },
          "minItems": 2
        },
        "bitShiftLeft": {
          "description": "A bit-shift left operation.",
          "type": "object",
          "properties": {
            "var": {
              "description": "The variable being bit-shifted.",
              "type": "string"
            },
            "bits": {
              "description": "Number of bits to shift left.",
              "type": "integer"
            }
          },
          "required": [
            "var", "bits"
          ]
        },
        "bitShiftRight": {
          "description": "A bit-shift right operation.",
          "type": "object",
          "properties": {
            "var": {
              "description": "The variable being bit-shifted.",
              "type": "string"
            },
            "bits": {
              "description": "Number of bits to shift right.",
              "type": "integer"
            }
          },
          "required": [
            "var", "bits"
          ]
        },
        "arc tangent": {
          "description": "Computes the arc tangent on a given input",
          "type": ["string", "number"]
        },
        "rawRead": {
          "description": "Directly read a specified number of bits from device",
          "type": "integer"
        }
      }
    }
  }
}